generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                    String                 @id @default(cuid())
  name                  String?
  email                 String?                @unique
  emailVerified         DateTime?
  image                 String?
  password              String?
  role                  UserRole               @default(USER)
  isTwoFactorEnabled    Boolean                @default(false)
  accounts              Account[]
  comments              Comment[]
  gallery               Gallery[]
  likes                 Like[]
  posts                 Post[]
  profile               Profile?
  twoFactorConfirmation TwoFactorConformation?
}

model Profile {
  firstName   String?
  lastName    String?
  coverImage  String? @default("")
  gender      Gender? @map("gender")
  age         Int?
  phoneNumber String?
  regionCode  String?
  /// Extend this {lat ,lng, zipCode, postService...} 
  adres       String?
  userId      String  @unique
  user        User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Post {
  PostId    String    @id @default(cuid())
  text      String?   @unique
  timestamp DateTime  @default(now())
  userId    String
  comments  Comment[]
  image     Images[]
  likes     Like[]
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Images {
  url       String
  postId    String?
  CommentId String?
  id        Int      @id @default(autoincrement())
  Comment   Comment? @relation(fields: [CommentId], references: [CommentId], onDelete: Cascade)
  Post      Post?    @relation(fields: [postId], references: [PostId], onDelete: Cascade)
}

model Comment {
  CommentId String   @id @default(cuid())
  text      String?
  timestamp DateTime @default(now())
  postId    String?
  userId    String
  galleryId String?
  gallery   Gallery? @relation(fields: [galleryId], references: [imageId])
  post      Post?    @relation(fields: [postId], references: [PostId])
  user      User     @relation(fields: [userId], references: [id])
  image     Images[]
  likes     Like[]
}

model Gallery {
  imageId   String    @id @default(cuid())
  image     String
  text      String?
  timestamp DateTime  @default(now())
  userId    String
  coments   Comment[]
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  likes     Like[]
}

model Like {
  likeId    Int      @id @default(autoincrement())
  postId    String?
  commentId String?
  userId    String
  galleryId String?
  comment   Comment? @relation(fields: [commentId], references: [CommentId])
  gallery   Gallery? @relation(fields: [galleryId], references: [imageId])
  post      Post?    @relation(fields: [postId], references: [PostId], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id])

  @@unique([postId, userId])
  @@unique([commentId, userId])
  @@unique([galleryId, userId])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(cuid())
  email   String
  token   String
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConformation {
  id     String @id @default(cuid())
  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum UserRole {
  ADMIN
  USER
  EDITOR
  GUEST
}

enum Gender {
  Male
  Female
  Undefined
}
