generator client {
  provider = "prisma-client-js"
  engineType      = "dataproxy" // Enables Prisma Accelerate
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                    String                 @id @default(cuid())
  name                  String?
  email                 String?                @unique
  emailVerified         DateTime?
  image                 String?
  password              String?
  role                  UserRole               @default(USER)
  isTwoFactorEnabled    Boolean                @default(false)
  accounts              Account[]
  comments              Comment[]
  gallery               Gallery[]
  likes                 Like[]
  posts                 Post[]
  profile               Profile?
  twoFactorConfirmation TwoFactorConformation?
  createdAt           DateTime                @default(now())

@@index([id])
}

model ProfileSettings {
  userId String @id
  profile Profile @relation(references: [userId],fields: [userId])
  pirvate         Boolean @default(true)
  showNumber      Boolean @default(false)
  showEmail       Boolean @default(false)

  updateDate DateTime @default(now())
}

model Worker {
  userId String @id @unique
  profile Profile @relation(references: [userId],fields: [userId])
  department String
  experienceLevel String?

  workingHours WorkingHours[]
  reviews Reviews[] 



  contracts Contract[] 

  creationDate DateTime @default(now())
}
model WorkingHours {
workingHoursId String @id @default(cuid())
  worker_id String
  worker Worker @relation(references: [userId],fields: [worker_id])

  day_of_week WeekDays

  start_time DateTime?
  end_time DateTime?
  is_open Boolean @default(false)
}
enum WeekDays {
  monday
  tuesday
  wednesday
  thursday
  friday
  saturday
  sunday
}

model Reviews {
  review_id String @id @default(cuid()) @unique

  worker_id String
  worker Worker @relation(fields: [worker_id],references: [userId])

  client_id String
  author Client @relation(fields: [client_id],references: [userId])

  rating Int
   comment Comment? 
}


model Client {
  userId String @id @unique
  profile Profile @relation(references: [userId],fields: [userId])
  contactNumber String
  contracts Contract[] 

  reviews Reviews[]
  creationDate DateTime @default(now())

}

model Contract {

contractId String @id @default(cuid())

  workerId String @unique
  worker Worker @relation(references: [userId],fields: [workerId])

  clientId  String @unique
  client Client @relation(references: [userId],fields: [clientId])

timeStamp DateTime @default(now())

}

model ProfileStats {
  userId String @id @unique
  profile Profile @relation(references: [userId],fields: [userId])

  commentsCount Int? @default(0)
  likesCount    Int? @default(0)
  rating        Int? @default(0)

  rewiewsCount  Int? @default(0)
  contractCount Int? @default(0)

  partnersCount Int? @default(0)
}

model Profile {
  firstName   String?
  lastName    String?
  coverImage  String? @default("")
  image       String?

  shortName   String? @unique
  gender      Gender? @map("gender")

  age         Int?
  phoneNumber String?
  
  userId      String  @unique @id
  adres       String?

 
  // accounts    Account[]
 
  bio             String?

  createdAt   DateTime @default(now())

  stats       ProfileStats?
  settings    ProfileSettings? 
  sessions    Session[]
  coords      Coords[]  @relation("ProfileCoords")

  worker      Worker?
  client      Client?
  
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade,onUpdate: Cascade)

    requested    FriendShip[] @relation("RequestedFriends")
    received     FriendShip[] @relation("ReceivedFriends")


@@index([userId])
@@index([firstName])
}

model Session {
  id          String   @id @default(cuid()) // Unique session ID
  userId      String   // Reference to User model
  profile        Profile     @relation(fields: [userId], references: [userId], onDelete: Cascade)

  expires     DateTime // Expiry of the session
  deviceType  String?  // Device info (e.g., 'desktop', 'mobile')
  osInfo      String?  // OS info (e.g., 'Windows 10', 'iOS 17')
  browserInfo String?  // Browser info (e.g., 'Chrome 115')
  ipAddress   String?  // IP address for security
  

  fingerprint String? @unique

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([fingerprint,userId])
}


model FriendShip {
  transactionId String @id @default(cuid())
  requesterId String
  adresseedId String 
  status FriendStatus @default(PENDING)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  requester     Profile @relation("RequestedFriends" ,fields: [requesterId],references: [userId],onDelete: Cascade)
  addressee     Profile @relation("ReceivedFriends"  ,fields: [adresseedId],references: [userId],onDelete: Cascade)

  @@index([requesterId])
  @@index([adresseedId])
  @@unique([requesterId,adresseedId])
}

enum FriendStatus {
  PENDING
  ACCEPTED
  DECLINED
  BLOCKED
}

model Post {
  PostId      String    @id @default(cuid())
  timestamp   DateTime  @default(now())
  superText   String?
  text        String?
  userId      String
  repostCount Int? @default(0)
  originPostId String?
  originPost  Post? @relation("OriginalPost",fields: [originPostId],references: [PostId],onDelete: Cascade)
  reposts     Post[] @relation("OriginalPost")
  comments    Comment[]
  image       Images[]
  likes       Like[]
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@index([timestamp])
  @@index([PostId])
}

model Images {
  url       String
  postId    String?
  CommentId String?
  id        Int      @id @default(autoincrement())
  Comment   Comment? @relation(fields: [CommentId], references: [CommentId], onDelete: Cascade)
  Post      Post?    @relation(fields: [postId], references: [PostId], onDelete: Cascade)

  @@index([postId])
}

model Comment {
  CommentId String   @id @default(cuid())
  userId    String
  
  postId    String?
  originCommentId String?
  review_id String? @unique

  galleryId String?
  coordsId  String?

  text      String?
  gallery   Gallery? @relation(fields: [galleryId], references: [imageId],onDelete: Cascade)
  post      Post?    @relation(fields: [postId], references: [PostId],onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id],onDelete: Cascade)

  review    Reviews?  @relation(fields: [review_id],references: [review_id],onDelete: Cascade)
  
  image     Images[]
  likes     Like[]
  originComment Comment? @relation("OriginOfComentAnswers",fields: [originCommentId],references: [CommentId],onDelete: Cascade)
  answers Comment[] @relation("OriginOfComentAnswers")

  coords Coords? @relation(fields: [coordsId], references: [coordsId])
  timestamp DateTime @default(now())

  @@index([timestamp]) 
  @@index([postId])
 }

model Gallery {
  imageId   String    @id @default(cuid())
  image     String
  text      String?
  timestamp DateTime  @default(now())

  userId    String
  coordsId  String?    

  coments   Comment[]
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  likes     Like[]
  coords    Coords?    @relation(fields: [coordsId],references: [coordsId])
}

model Like {
  likeId    Int      @id @default(autoincrement())
  postId    String?
  commentId String?
  userId    String
  galleryId String?
  comment   Comment? @relation(fields: [commentId], references: [CommentId], onDelete: Cascade)
  gallery   Gallery? @relation(fields: [galleryId], references: [imageId])
  post      Post?    @relation(fields: [postId], references: [PostId], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([postId, userId])
  @@unique([commentId, userId])
  @@unique([galleryId, userId])

  @@index([userId])
  @@index([postId])
}

model Account {
  id                String  @default(cuid())
  userId            String

  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  // profile           Profile @relation(fields: [userId],references: [userId])
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId,id])
  @@unique([userId,access_token])
  @@unique([provider,providerAccountId])
  @@unique([userId,provider])
  @@index([userId])
}

model Coords {
  coordsId    String @id @default(cuid())
  userId      String? 
  adminId     String?

  profile Profile[] @relation("ProfileCoords")

  placeName   String?

  latitude    Int
  longitude   Int

  comments    Comment[] 
  gallery     Gallery[]
  image       String?
  coverImage  String?
}


model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(cuid())
  email   String
  token   String
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConformation {
  id     String @id @default(cuid())
  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum UserRole {
  ADMIN
  EDITOR
  WORKER
  CLIENT
  USER
  GUEST
  BLOCKED
}

enum Gender {
  Male
  Female
  Undefined
}

